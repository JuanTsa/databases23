-----------------------
------- selects -------
-----------------------
select * from user;
select * from school_unit;
select * from category;
select * from author;
select * from book;
select * from reservation;
select * from borrowing;
select * from review;

select * from book_author;
select * from book_category;

---------------------
---------------------
------- ADMIN ------- 
---------------------
---------------------

---------------------------------------------------
--------------------- CHECKED ---------------------
---------------------------------------------------
1) List with the total borrowings per school (Search criteria: year, calendar month).
SELECT
  s.School_Name,
  YEAR(b.Borrow_Date) AS Borrow_Year,
  MONTH(b.Borrow_Date) AS Borrow_Month,
  COUNT(*) AS Total_Borrowings
FROM
  School_Unit s
  INNER JOIN User u ON s.School_ID = u.School_ID
  INNER JOIN Borrowing b ON u.User_ID = b.User_ID
WHERE
  YEAR(b.Borrow_Date) = <year> AND		-- Replace with the desired year
  MONTH(b.Borrow_Date) = <month>		-- Replace with the desired calendar month
GROUP BY
  s.School_ID,
  YEAR(b.Borrow_Date),
  MONTH(b.Borrow_Date)
ORDER BY
  s.School_Name;

---------------------------------------------------
--------------------- CHECKED ---------------------
---------------------------------------------------
2) For a given book category (user-selected), which authors belong to it and which teachers have borrowed books from that category in the last year?

//η τομή των 2

SELECT DISTINCT au.Author_Name, au.Author_Surname, u.Name, u.Surname
FROM Book_Category bc
JOIN Book b ON bc.Book_ID = b.Book_ID
JOIN Book_Author ba ON b.Book_ID = ba.Book_ID
JOIN Author au ON ba.Author_ID = au.Author_ID
JOIN Borrowing br ON b.Book_ID = br.Book_ID
JOIN User u ON br.User_ID = u.User_ID
WHERE bc.Category_Name = <category_name>			-- Replace with the desired category_name
  AND br.Borrow_Date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
  AND u.User_Type = 'Teacher';

// ξεχωριστά για το author
SELECT DISTINCT a.Author_Name, a.Author_Surname
FROM Author a
JOIN Book_Author ba ON a.Author_ID = ba.Author_ID
JOIN Book_Category bc ON ba.Book_ID = bc.Book_ID
JOIN Category c ON bc.Category_ID = c.Category_ID
WHERE c.Category_Name = 'category_name';      -- Replace with the desired category_name

//ξεχωριστά για το teachers
SELECT DISTINCT U.Name, U.Surname
FROM User U
JOIN Borrowing B ON U.User_ID = B.User_ID
JOIN Book_Category BC ON B.Book_ID = BC.Book_ID
JOIN Category C ON BC.Category_ID = C.Category_ID
WHERE U.User_Type = 'Teacher'
  AND C.Category_Name = 'category_name'     -- Replace with the desired category_name
  AND B.Borrow_Date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR);

---------------------------------------------------
--------------------- CHECKED ---------------------
---------------------------------------------------
3) Find young teachers (age < 40 years) who have borrowed the most books and the number of books.
SELECT U.User_ID, U.Name, U.Surname, U.Age, COUNT(*) AS NumOfBooksBorrowed
FROM User U
JOIN Borrowing B ON U.User_ID = B.User_ID
JOIN Book BK ON B.Book_ID = BK.Book_ID
WHERE U.User_Type = 'Teacher' AND U.Age < 40
GROUP BY U.User_ID
ORDER BY NumOfBooksBorrowed DESC
LIMIT 1;

=============================================
=================== ΛΑΘΟΣ ===================
=============================================
4) Find authors whose books have not been borrowed.
SELECT DISTINCT Author.Author_ID, Author.Author_Name, Author.Author_Surname 
FROM Author
LEFT JOIN Book_Author ON Author.Author_ID = Book_Author.Author_ID
LEFT JOIN Book ON Book_Author.Book_ID = Book.Book_ID
LEFT JOIN Borrowing ON Book.Book_ID = Borrowing.Book_ID
WHERE Borrowing.Borrowing_ID IS NULL;

=============================================
=================== ΛΑΘΟΣ ===================
=============================================
5) Which operators have loaned the same number of books in a year with more than 20 loans?
SELECT
    u.Operator_Name,
    u.Operator_Surname,
    COUNT(*) AS Total_Borrowings
FROM
    User u
    JOIN Borrowing b ON u.User_ID = b.User_ID
    JOIN Book bk ON b.Book_ID = bk.Book_ID
WHERE
    u.User_Type = 'Operator'
    AND YEAR(b.Borrow_Date) = YEAR(CURRENT_DATE())
GROUP BY
    u.Operator_Name,
    u.Operator_Surname
HAVING
    COUNT(*) > 20
ORDER BY
    Total_Borrowings DESC;

-------------------------------------------------------
--------------------- CHECKED ??? ---------------------
-------------------------------------------------------
6) Many books cover more than one category; among category pairs (e.g., history and poetry) that are common in books, find the top-3 pairs that appeared in borrowings.
SELECT C1.Category_Name AS Category1, C2.Category_Name AS Category2, COUNT(*) AS BorrowingCount
FROM Book_Category BC1
JOIN Book_Category BC2 ON BC1.Book_ID = BC2.Book_ID AND BC1.Category_ID < BC2.Category_ID
JOIN Book B ON BC1.Book_ID = B.Book_ID
JOIN Borrowing BR ON B.Book_ID = BR.Book_ID
JOIN Category C1 ON BC1.Category_ID = C1.Category_ID
JOIN Category C2 ON BC2.Category_ID = C2.Category_ID
GROUP BY C1.Category_Name, C2.Category_Name
ORDER BY BorrowingCount DESC
LIMIT 3;

---------------------------------------------------
--------------------- CHECKED ---------------------
---------------------------------------------------
7) Find all authors who have written at least 5 books less than the author with the most books.
SELECT A.`Author_ID`, A.`Author_Name`, A.`Author_Surname`, A.`Books_Written`
FROM `Author` A
WHERE A.`Books_Written` < (
  SELECT MAX(`Books_Written`) - 4
  FROM `Author`
)
ORDER BY A.`Books_Written` DESC;



------------------------
------- OPERATOR -------
------------------------
1) Find all books by Title, Author (Search criteria: title/ category/ author/ copies).
SELECT b.Title, a.Author_Name, a.Author_Surname
FROM Book AS b
JOIN Book_Author AS ba ON b.Book_ID = ba.Book_ID
JOIN Author AS a ON ba.Author_ID = a.Author_ID
JOIN Book_Category AS bc ON b.Book_ID = bc.Book_ID
JOIN Category AS c ON bc.Category_ID = c.Category_ID
WHERE b.Title LIKE '%search_term%'
   OR c.Category_Name LIKE '%search_term%'
   OR CONCAT(a.Author_Name, ' ', a.Author_Surname) LIKE '%search_term%'
   OR b.Available_Copies >= search_term;
   


2) Find all borrowers who own at least one book and have delayed its return. (Search criteria: First Name, Last Name, Delay Days).
SELECT U.Name, U.Surname, DATEDIFF(NOW(), B.Due_Date) AS Delay_Days
FROM User U
JOIN Borrowing B ON U.User_ID = B.User_ID
WHERE B.Status = 'Delayed';



3) Average Ratings per borrower and category (Search criteria: user/category)
SELECT
    u.Username AS User,
    c.Category_Name AS Category,
    AVG(r.Rating) AS AverageRating
FROM
    User u
    JOIN Borrowing br ON u.User_ID = br.User_ID
    JOIN Book b ON br.Book_ID = b.Book_ID
    JOIN Book_Category bc ON b.Book_ID = bc.Book_ID
    JOIN Category c ON bc.Category_ID = c.Category_ID
    JOIN Rating r ON br.Borrowing_ID = r.Borrowing_ID
WHERE
    u.Username = 'your_username' -- Replace with the desired username
    AND c.Category_Name = 'your_category' -- Replace with the desired category name
GROUP BY
    u.Username,
    c.Category_Name;


 
--------------------
------- USER -------
--------------------
1) List with all books (Search criteria: title/category/author), ability to select a book and create a reservation request.
SELECT b.Book_ID, b.Title, a.Author_Name, c.Category_Name
FROM Book AS b
LEFT JOIN Book_Author AS ba ON b.Book_ID = ba.Book_ID
LEFT JOIN Author AS a ON ba.Author_ID = a.Author_ID
LEFT JOIN Book_Category AS bc ON b.Book_ID = bc.Book_ID
LEFT JOIN Category AS c ON bc.Category_ID = c.Category_ID
WHERE b.Title LIKE '%search_term%'
   OR a.Author_Name LIKE '%search_term%'
   OR c.Category_Name LIKE '%search_term%';



2) List of all books borrowed by this user.
SELECT b.Title
FROM Book b
JOIN Borrowing bor ON b.Book_ID = bor.Book_ID
JOIN User u ON u.User_ID = bor.User_ID
WHERE u.Username = 'logged-in-username';
