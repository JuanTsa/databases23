=========================================================================
WE'VE GOT A PROBLEM IF THE INPUT HAS ' IN IT, THE QUERY DOESN'T WORK!!!!!
=========================================================================

-- copies_borrowed: 14
-- copies_reserved: 18
-- 5 (3) schools, 1 administrator, 5 (3) operators, 50 (30) students, 30 (10) teachers, 150 (100) books, 60 (50) borrowings, 50 (40) reservations, 30 reviews
-- 10 categories, 47 authors
-- 179 book_author, 174 book_category

===============================
======== RELATIONSHIPS ========
===============================
admin		registers	school_unit
admin	 	approves	operator
school_unit	has		book

operator	approves	student, teacher
operator	registers	book, borrowing, reservation, review

user		views		book, borrowing, reservation, review

=======================
======== EXTRA ========
=======================
administrator: backup, restore

In case a copy of the book is not available, the user's request (reservation) is put on hold and is served upon the return of a copy

A reservation cannot be made if a book has not been returned on time or if the same user has already borrowed the title.

Users have the option to cancel any current reservations.

Reservations have a time frame of one week and are automatically canceled once it expires.

============================
======== Labs To Do ========
============================
Database Schema Design
1. Start thinking about the entities you need
	Identify entities, attributes and relationships from the problem description
	identify cardinality ratios of the relationships found				
2. Design an E/R diagram for your database						
	Look for any issues that are apparent in the E/R diagram			

Materialize Schema: DDL statements
1. Create your tables
	create a table for each entity							
	a table (representing an entity) should have:				
		a column for each attribute, with appropriate data type			
		a primary key and possibly some candidate keys				
	include a foreign key (one-to-many relationships)					
	add indexes & constraints to your tables

2.	Create views as needed
	Create triggers for your tables
	Create Stored Procedures & Functions for your application
	Add Information to the Database: DML script
		Populate the database with data
		Write needed queries
		Test and adapt offered functionality
	Finetune tables, queries, views, triggers, stored procedures & functions.



