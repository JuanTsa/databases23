//we could use as book_id: isbn + number_of_copy

=======================
==== RELATIONSHIPS ====
=======================
admin		registers	school_unit
admin	 	approves	operator
school_unit	has		book

operator	approves	student, teacher
operator	registers	book, borrowing, reservation, review

user		views		book, borrowing, reservation, review

=================
==== QUERIES ====
=================
---- ADMIN ----
1) List with the total loans per school (Search criteria: year, calendar month)

2) For a given book category (user-selected), which authors belong to it and which teachers have borrowed books from that category in the last year?

3) Find young teachers (age < 40 years) who have borrowed the most books and the number of books.
SELECT U.User_ID, U.Name, U.Surname, U.Age, COUNT(*) AS NumOfBooksBorrowed
FROM User U
JOIN Borrowing B ON U.User_ID = B.User_ID
JOIN Book BK ON B.Book_ID = BK.Book_ID
WHERE U.User_Type = 'Teacher' AND U.Age < 40
GROUP BY U.User_ID
ORDER BY NumOfBooksBorrowed DESC
LIMIT 1;

4) Find authors whose books have not been borrowed.
SELECT Author.Author_ID, Author.Author_Name, Author.Author_Surname 
FROM Author
LEFT JOIN Book_Author ON Author.Author_ID = Book_Author.Author_ID
LEFT JOIN Book ON Book_Author.Book_ID = Book.Book_ID
LEFT JOIN Borrowing ON Book.Book_ID = Borrowing.Book_ID
WHERE Borrowing.Borrowing_ID IS NULL

5) Which operators have loaned the same number of books in a year with more than 20 loans?

6) Many books cover more than one category. Among field pairs (e.g., history and poetry) that are common in books, find the top-3 pairs that appeared in borrowings.
SELECT
    c1.Category_Name AS Category1,
    c2.Category_Name AS Category2,
    COUNT(*) AS BorrowingCount
FROM
    Book_Category bc1
    JOIN Book_Category bc2 ON bc1.Book_ID = bc2.Book_ID AND bc1.Category_ID < bc2.Category_ID
    JOIN Category c1 ON bc1.Category_ID = c1.Category_ID
    JOIN Category c2 ON bc2.Category_ID = c2.Category_ID
    JOIN Book b ON bc1.Book_ID = b.Book_ID
    JOIN Borrowing br ON b.Book_ID = br.Book_ID
GROUP BY
    c1.Category_Name,
    c2.Category_Name
ORDER BY
    BorrowingCount DESC
LIMIT 3;

7) Find all authors who have written at least 5 books less than the author with the most books.

---- OPERATOR ----
1) All books by Title, Author (Search criteria: title/ category/ author/ copies).

2) Find all borrowers who own at least one book and have delayed its return. (Search criteria: First Name, Last Name, Delay Days).

3) Average Ratings per borrower and category (Search criteria: user/category)

---- USER ----
1) List with all books (Search criteria: title/category/author), ability to select a book and create a reservation request.

2) List of all books borrowed by this user.

===============
==== EXTRA ====
===============
administrator: backup, restore

In case a copy of the book is not available, the user's request (reservation) is put on hold and is served upon the return of a copy

A reservation cannot be made if a book has not been returned on time or if the same user has already borrowed the title.

Users have the option to cancel any current reservations.

Reservations have a time frame of one week and are automatically canceled once it expires.

================
==== Lab 02 ====
================
Database Schema Design
1. Start thinking about the entities you need
	Identify entities, attributes and relationships from the problem description
	identify cardinality ratios of the relationships found				
2. Design an E/R diagram for your database						
	Look for any issues that are apparent in the E/R diagram			


====================
==== Labs 03-08 ====
====================
Materialize Schema: DDL statements
1. Create your tables
	create a table for each entity							
	a table (representing an entity) should have:				
		a column for each attribute, with appropriate data type			
		a primary key and possibly some candidate keys				
	include a foreign key (one-to-many relationships)					

==== ^^^ DONE ^^^ ====

	add indexes & constraints to your tables

2.	Create views as needed
	Create triggers for your tables
	Create Stored Procedures & Functions for your application
	Add Information to the Database: DML script
		Populate the database with data
		Write needed queries
		Test and adapt offered functionality
	Finetune tables, queries, views, triggers, stored procedures & functions.



